diff --git a/app/(tabs)/assistant.tsx b/app/(tabs)/assistant.tsx
index 98cdca2..b47b61f 100644
--- a/app/(tabs)/assistant.tsx
+++ b/app/(tabs)/assistant.tsx
@@ -287,8 +287,8 @@ export default function AssistantScreen() {
 
     const controller = new AbortController();
     const timeout = setTimeout(() => controller.abort(), 25000);
-
-    let responseText: string | null = null;
+    const fallbackText = pickFallbackReply(language, userMessage.text);
+    let responseText = "";
     try {
       const response = await fetch("https://toolkit.rork.com/text/llm/", {
         method: "POST",
@@ -313,22 +313,26 @@ export default function AssistantScreen() {
       clearTimeout(timeout);
 
       if (!response.ok) {
-        throw new Error(`Request failed with status ${response.status}`);
+        responseText = fallbackText;
+      } else {
+        const raw = await response.text();
+        const parsed = safeParseJSON(raw);
+        const parsedText = parseAssistantCompletion(parsed ?? raw);
+        if (typeof parsedText === "string" && parsedText.trim().length > 0) {
+          responseText = parsedText.trim();
+        } else if (typeof raw === "string") {
+          responseText = raw.trim();
+        }
       }
-
-      const raw = await response.text();
-      const parsed = safeParseJSON(raw);
-
-      responseText = parseAssistantCompletion(parsed ?? raw) ?? (typeof raw === "string" ? raw.trim() : null);
     } catch (error) {
       console.error("Error sending message:", error);
+      responseText = fallbackText;
     } finally {
       clearTimeout(timeout);
       setIsLoading(false);
     }
 
-    const fallbackText = pickFallbackReply(language, userMessage.text);
-    const aiText = responseText && responseText.length > 0 ? responseText : fallbackText || t.error;
+    const aiText = responseText && responseText.trim().length > 0 ? responseText : fallbackText || t.error;
 
     const aiMessage: Message = {
       id: `${Date.now()}-ai`,
diff --git a/app/(tabs)/meditate.tsx b/app/(tabs)/meditate.tsx
index 958321f..c766642 100644
--- a/app/(tabs)/meditate.tsx
+++ b/app/(tabs)/meditate.tsx
@@ -26,12 +26,12 @@ const { width } = Dimensions.get("window");
 type Session = MeditationSession | CustomMeditationSession;
 
 const getDurationMinutes = (session: Session) => {
-  const parsed = Number(session.duration);
-  if (Number.isFinite(parsed) && parsed >= 0) {
-    return parsed;
+  const rawDuration = (session as any).duration;
+  if (typeof rawDuration === "number" && Number.isFinite(rawDuration)) {
+    return Math.max(0, Math.round(rawDuration));
   }
-  const fallback = Number.parseInt(String((session as any).duration ?? ""), 10);
-  return Number.isFinite(fallback) && fallback >= 0 ? fallback : 0;
+  const parsed = Number.parseFloat(String(rawDuration ?? ""));
+  return Number.isFinite(parsed) && parsed >= 0 ? Math.round(parsed) : 0;
 };
 
 const TRANSLATIONS: Record<
diff --git a/app/focus-meditation.tsx b/app/focus-meditation.tsx
index 3d72951..24c1434 100644
--- a/app/focus-meditation.tsx
+++ b/app/focus-meditation.tsx
@@ -38,12 +38,12 @@ const isCustom = (
 };
 
 const getDurationMinutes = (session: (typeof MEDITATION_SESSIONS)[number] | CustomMeditationSession) => {
-  const parsed = Number(session.duration);
-  if (Number.isFinite(parsed) && parsed >= 0) {
-    return parsed;
+  const rawDuration = (session as any).duration;
+  if (typeof rawDuration === "number" && Number.isFinite(rawDuration)) {
+    return Math.max(0, Math.round(rawDuration));
   }
-  const fallback = Number.parseInt(String((session as any).duration ?? ""), 10);
-  return Number.isFinite(fallback) && fallback >= 0 ? fallback : 0;
+  const parsed = Number.parseFloat(String(rawDuration ?? ""));
+  return Number.isFinite(parsed) && parsed >= 0 ? Math.round(parsed) : 0;
 };
 
 export default function FocusMeditationScreen() {
diff --git a/app/meditation/[id].tsx b/app/meditation/[id].tsx
index a59f4fb..a2e8aa7 100644
--- a/app/meditation/[id].tsx
+++ b/app/meditation/[id].tsx
@@ -30,7 +30,7 @@ const isCustomSession = (
 };
 
 const toSeconds = (value: unknown) => {
-  const numeric = Number(value);
+  const numeric = typeof value === "number" ? value : Number.parseFloat(String(value ?? ""));
   if (!Number.isFinite(numeric)) {
     return 0;
   }
@@ -38,7 +38,7 @@ const toSeconds = (value: unknown) => {
 };
 
 const minutesToSeconds = (value: unknown) => {
-  const minutes = Number(value);
+  const minutes = typeof value === "number" ? value : Number.parseFloat(String(value ?? ""));
   if (!Number.isFinite(minutes)) {
     return 0;
   }
